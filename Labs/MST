#include <iostream>
#include <cstring>
using namespace std;

// initialize the no of vertices in the given graph
#define V 6


int main() {
    int min_cost = 0; // minimum cost
    int n_edges;  // number of edge

    //creating adjacency matrix for the graph
    int graph[6][6] = {{ 0,  3,  0,  0,  0,  1},
                       { 3,  0,  2,  1, 10,  0},
                       { 0,  2,  0,  3,  0,  5},
                       { 0,  1,  3,  0,  5,  0},
                       { 0, 10,  0,  5,  0,  4},
                       { 1,  0,  5,  0,  4,  0}};
    
    // array to mark traversed nodes    
    bool traveled[V];

    // set all traveled false initially
    for (int i=0; i<V; i++) traveled[i] = false;

    // set number of edge to 0
    n_edges = 0;

    // V is the total number of vertices in the graph.
    // first vertex set it to true as it is travelled.
    traveled[0] = true;

    int n_row;   // row number
    int n_col;   // column number

    // print titles
    cout << " Path\t" << "Cost" << endl;

    while (n_edges < (V-1)) {
        int min = INT_MAX; // set minimum to a higher value
        n_row = 0;
        n_col = 0;

        // go through each vertex in graph
        for (int i=0; i<V; i++) {

            if (traveled[i]) {
                for (int j=0; j<V; j++) {
                    // If the vertex is already included traversed, ignore it
                    if ((!traveled[j]) && (graph[i][j])) {  // not in traveled and there is an edge
                        // calculate the shortest distance
                        if (min > graph[i][j]) {
                            min = graph[i][j];
                            n_row = i;
                            n_col = j;
                        }
                    }
                }
            }
        }
        cout << n_row << " -- " << n_col << "\t " << graph[n_row][n_col];
        cout << "\n";

        // mark vertex as traversed
        traveled[n_col] = true;
        n_edges++;
        min_cost += graph[n_row][n_col]; // continuou the calculation of minimum cost
    }

    cout << "The minimum cost of the graph is: "<< min_cost << endl;
    return 0;
}

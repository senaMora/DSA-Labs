#include <iostream>
using namespace std;

struct node {
  int key;
  struct node *left, *right;
};

// Inorder traversal
void traverseInOrder(struct node *root) {
  if(root == NULL) {
    return;
  }

  traverseInOrder(root->left);
  cout << root->key << " ";
  traverseInOrder(root->right);
}

int findMinOfRight(struct node* root) {
    while (root != NULL) {
        root = root->left;
    }
    return root->key;
}

// Insert a node
struct node *insertNode(struct node *root, int key) {
  // if root is NULL 
  if (root == NULL) {
    struct node* temp = new node;  // make a new node
    temp->key = key;               // pass the value to the node
    temp->left = NULL;
    temp->right = NULL; // set left and right child as NULL
    return temp;
  }
  // when the value LESS tha the value of root
  else if (root->key > key) {
    root->left = insertNode(root->left, key);
  }
  // when the value GREATER tha the value of root
  else if (root->key < key) {
    root->right = insertNode(root->right, key);
  }
  return root;
}

// Deleting a node
struct node *deleteNode(struct node *root, int key) {
    // base case
    if (root == NULL) {
        return root;
    }
    // when the value LESS tha the value of root
    if (root->key > key) {
        root->left = deleteNode(root->left, key);
    }
    // when the value GREATER tha the value of root
    else if (root->key < key) {
        root->right = deleteNode(root->right, key);
    }
    // FOUND the key then......
    else {
        //case 1 -- when node is a leave
        if ((root->left == NULL) && (root->right == NULL)) {
            delete root;
            return NULL;
        }
        //case 2 -- when node has a one child
        else if (root->left == NULL) {
            struct node* temp = root->right;
            delete root; // free the memory allocation 
            return temp;
        }
        else if (root->right == NULL) {
            struct node* temp = root->left;
            delete root; // free the memory allocation 
            return temp;
        }
        //case 3 -- when node has 2 children
        int minR = findMinOfRight(root->right);
        root->key = minR;
        root->right = deleteNode(root->right, minR);
    }
    return root;  // return the updated root
}

// Driver code
int main() {
  struct node *root = NULL;

  int operation;
  int operand;
  cin >> operation;

  while (operation != -1) {
    switch(operation) {
      case 1: // insert
        cin >> operand;
        root = insertNode(root, operand);
        cin >> operation;
        break;
      case 2: // delete
        cin >> operand;
        root = deleteNode(root, operand);
        cin >> operation;
        break;
      default:
        cout << "Invalid Operator!\n";
        return 0;
    }
  }
  
  traverseInOrder(root);
}
